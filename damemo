#!/usr/bin/env ruby

# usage:
#   memo                # new entry
#   memo keywords...    # search keywords

# memo-file format
#
# = :keyword1:keyword2:...: title for 1st entry
# content
# [YYYY-MM-DD HH:MM:SS]-[YYYY-MM-DD HH:MM:SS]
#
# = title for 2nd entry
# ...
#

require 'tmpdir'
require 'tempfile'
require 'fileutils'
require 'optparse'
require 'time'
require 'pp'

$editor = ENV['VISUAL'] || ENV['EDITOR'] || 'vi'
$memo_file = "#{ENV['HOME']}/.damemo/memo.txt"
#$memo_file = "/tmp/memo.txt"

def shell_quote(str)
  str.gsub(/'|[^']+/) {|s|
    s == "'" ? "\\'" : "'#{s}'"
  }
end

def git_maintained?(filename)
  dir, name = File.split(filename)
  File.directory?("#{dir}/.git")
end

def commit_file(filename)
  if git_maintained?(filename)
    dir, name = File.split(filename)
    system("cd #{shell_quote dir}; git add #{shell_quote name} && git commit -mupdate")
  end
end

def modify_file(filename)
  dir = File.dirname(filename)
  unless File.directory? dir
    FileUtils.mkpath dir
  end
  old_content = open(filename, File::CREAT|File::RDWR) {|f|
    f.read
  }
  new_content = yield old_content.dup
  return if old_content == new_content
  new = filename + '.new'
  File.open(new, 'w') {|f| f << new_content }
  bak = filename + '.bak'
  File.unlink(bak) if File.exist? bak
  File.link(filename, bak)
  File.rename(new, filename)
  commit_file(filename)
end

def run_editor(content, line=nil)
  tmpdir = "#{Dir.tmpdir}/memo-#$$"
  Dir.mkdir tmpdir, 0700
  begin
    filename = "#{tmpdir}/memo.txt"
    File.open(filename, 'w') {|f| f << content }
    if line
      system($editor, "+#{line}", filename)
    else
      system($editor, filename)
    end
    File.read(filename)
  ensure
    FileUtils.rm_rf tmpdir
  end
end

DATEPAT = /\d{4}-\d\d-\d\d \d\d:\d\d:\d\d/
DATEFMT = '%Y-%m-%d %T'

# yields each memo entry as a string.
#
# memo-file format:
#
#   = :keyword1:keyword2:...: title for 1st entry
#   content
#   [YYYY-MM-DD HH:MM:SS]-[YYYY-MM-DD HH:MM:SS]
#  
#   = title for 2nd entry
#   ...
#
def scan_memo1(content)
  beg = nil
  content = "\n" + content
  content.scan(/\G(.+?)(?=(?:^= |\z))/m) {
    m = $~
    if !beg
      beg = true
      next
    end
    entry = m[1]
    entry.sub!(/\s*\z/, '')
    if /\n\[#{DATEPAT}\]-\[#{DATEPAT}\]\s*(?:id:(\d+))?\z/o !~ entry # xxx: year 10000 problem
      unless entry.sub!(/^\[(#{DATEPAT})\].*\z/) { "[#{$1}]-[#{$1}]" } # comversion from old damemo.
        entry << "\n" if /\n\z/ !~ entry
        entry << Time.now.strftime("[#{DATEFMT}]-[#{DATEFMT}]")
      end
    end
    entry << "\n\n"
    yield entry
  }
end

def scan_memo(content)
  if block_given?
    scan_memo1(content) {|str| yield str }
  else
    result = []
    scan_memo1(content) {|str| result << str }
    result
  end
end

KEYWORD_PAT = /[^:\0- ]+/

class Entry
  def Entry.parse(entry)
    if /\A=( +:(?:#{KEYWORD_PAT}:)+)? +(.*)\n((?:.*\n)*)\[(#{DATEPAT})\]-\[(#{DATEPAT})\]\s*(?:id:(\d+))?\s*/o !~ entry
      raise ArgumentError, "unexpected format: #{entry.inspect}"
    end
    keywords = $1
    title = $2
    content = $3
    create_time = $4
    last_time = $5
    id = $6
    if keywords
      keywords.sub!(/^ +:/, '')
      keywords = keywords.split(/:/)
    else
      keywords = []
    end
    id = id.to_i if id
    Entry.new(keywords, title, content, create_time, last_time, id)
  end

  def initialize(keywords, title, content, create_time, last_time, id=nil)
    @keywords = keywords
    @title = title
    @content = content
    @create_time = create_time
    @last_time = last_time
    @id = id
  end
  attr_reader :keywords, :title, :content, :create_time
  attr_accessor :last_time, :id

  def ==(other)
    @keywords == other.keywords &&
    @title == other.title &&
    @content == other.content &&
    @create_time == other.create_time &&
    @last_time == other.last_time &&
    @id == other.id
  end

  def compose
    if @keywords.empty?
      keywords = ""
    else
      keywords = " :#{@keywords.join(':')}:"
    end
    if /\n\z|\A\z/ =~ @content
      content = @content
    else
      content = "#{@content}\n"
    end
    if @id
      id = " id:#{@id}"
    else
      id = ''
    end
    "=#{keywords} #{@title}\n#{content}[#{@create_time}]-[#{@last_time}]#{id}\n\n"
  end
end

def reorder_memo(ents, keywords)
  logtime
  r = ents.sort_by {|e|
    # [kw1-in-keywords, kw2-in-keywords, ...
    #  kw1-case-sensitive-word-in-title, kw1-case-insensitive-word-kw1-in-title, kw1-case-insensitive-substring-in-title
    #  kw2-case-sensitive-word-in-title, kw2-case-insensitive-word-kw1-in-title, kw2-case-insensitive-substring-in-title
    #  ...,
    #  kw1-case-sensitive-word-in-str, kw1-case-insensitive-word-kw1-in-str, kw1-case-insensitive-substring-in-str
    #  kw2-case-sensitive-word-in-str, kw2-case-insensitive-word-kw1-in-str, kw2-case-insensitive-substring-in-str
    #  ...]
    str = e.compose
    title = e.title
    a = []
    pats_list = []
    keywords.each {|kw|
      if e.keywords.include?(kw)
        a << 1
      else
        a << 0
        pats_list << [
          /\b#{Regexp.quote kw}\b/,
          /\b#{Regexp.quote kw}\b/i,
          /#{Regexp.quote kw}/i
        ]
      end
    }
    pats_list.each {|pats| pats.each {|pat| a << ((pat =~ title) ? 1 : 0) } }
    pats_list.each {|pats| pats.each {|pat| a << ((pat =~ str) ? 1 : 0) } }
    a << e.last_time
    #p [title, *a]
    a
  }
  logtime
  r = r.reverse
  logtime
  r
end

def reorder_memo_by_time(ents)
  ents.sort_by {|e| e.last_time }.reverse
end

def reset_id(ents)
  h = {}
  id = 0
  ents.each {|e|
    e.id = nil
    k = [e.create_time, e.last_time]
    if h.include? k
      e.id = id
      id += 1
    end
    h[k] = true
  }
end

def clear_id(ents)
  ents.each {|e|
    e.id = nil
  }
end

def update_memo(original_ents, modified_ents, now)
  h = {}
  original_ents.each_with_index {|e, i|
    k = [e.create_time, e.last_time, e.id]
    h[k] = i
  }
  result = Array.new(original_ents.length)
  modified_ents.each {|e|
    k = [e.create_time, e.last_time, e.id]
    if h[k]
      if e != original_ents[h[k]]
        e.last_time = now
      end
      result[h[k]] = e
      h.delete k
    else
      e.last_time = now
      result << e
    end
  }
  result.compact!
  result
end

def search_last_keywords(ents)
  last_modified = nil
  keywords = []
  ents.each {|e|
    if !last_modified
      keywords = e.keywords
      last_modified = e.last_time
    elsif last_modified < e.last_time
      keywords = e.keywords
      last_modified = e.last_time
    end
  }
  keywords
end

def tempfile_with_content(basename, content)
  f = Tempfile.new(basename)
  f << content
  f.flush
end

def diff3(mine, older, your)
  mine_file = tempfile_with_content("damemo-mine", mine)
  older_file = tempfile_with_content("damemo-older", older)
  your_file = tempfile_with_content("damemo-your", your)
  merged = IO.popen(['diff3', '-mE', '-L', 'edited by you', '-L', 'before edited', '-L', 'edited by others', mine_file.path, older_file.path, your_file.path], 'r') {|f|
    f.read
  }
  status = $?
  unless status.exited?
    raise "[bug] unexpected diff3 failure: #{status.inspect}"
  end
  case status.exitstatus
  when 0
    conflict = false
  when 1
    conflict = true
  when 2
    raise "diff3 failed"
  else
    raise "[bug] unexpected diff3 status: #{status.inspect}"
  end
  return merged, conflict
end

def merge(orig, local)
  loop {
    remote = File.read($memo_file)
    break if orig == remote
    merged, conflict = diff3(local, orig, remote)
    if conflict
      line = nil
      merged_bytes = merged.dup
      merged_bytes.force_encoding("ASCII-8BIT") if merged_bytes.respond_to? :force_encoding
      if /<<<<<<</ =~ merged_bytes
        line = $`.count("\n") + 1
      end
      local = run_editor(merged, line)
    else
      local = merged
      break
    end
    orig = remote
  }
  local
end

$logtime = Time.now
def logtime
  t = Time.now
  e = t - $logtime
  e = e.to_f
  printf "%s %f\n", caller[0], e
  $logtime = t
end

def memo(keywords)
  logtime
  modify_file($memo_file) {|content|
    logtime
    ents = scan_memo(content).map {|str| str }
    logtime
    ents = ents.map {|str| Entry.parse(str) }
    logtime
    if keywords.empty?
      keywords = search_last_keywords(ents)
    end
    logtime
    reset_id(ents)
    logtime
    if $opt_sorted_by_time
      logtime
      ents2 = reorder_memo_by_time(ents)
      logtime
    else
      logtime
      ents2 = reorder_memo(ents, keywords)
      logtime
    end
    logtime
    time1 = Time.now.strftime(DATEFMT)
    new_entry = Entry.new(keywords, '', '', time1, time1)
    logtime
    ents2.unshift new_entry
    logtime
    content2 = ents2.map {|e| e.compose }.join
    logtime
    content3 = run_editor(content2)
    return if content3 == content2
    ents3 = scan_memo(content3).map {|str| Entry.parse(str) }
    ents3.shift if !ents3.empty? && ents3[0] == new_entry
    time2 = Time.now.strftime(DATEFMT)
    ents4 = update_memo(ents, ents3, time2)
    clear_id(ents4)
    content4 = ents4.map {|e| e.compose }.join
    merge(content, content4)
  }
end

def list_keywords
  h = {}
  File.foreach($memo_file) {|line|
    next if /\A=( +:(?:#{KEYWORD_PAT}:)+)/o !~ line
    $1.split(/:/).each {|kw| h[kw] = true }
  }
  puts h.keys.sort
end

$opt_sorted_by_time = false
def main
  action = :memo
  ARGV.options {|q|
    q.def_option('--help') { puts q; exit(0) }
    q.def_option('--list-keywords') { action = :list_keywords }
    q.def_option('-t', '--sorted-by-time') { $opt_sorted_by_time = true }
    q.parse!
  }
  case action
  when :memo
    memo(ARGV)
  when :list_keywords
    list_keywords
  else
    raise "[bug] unexpected action"
  end
end

if __FILE__ == $0
  main
end
